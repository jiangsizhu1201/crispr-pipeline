/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/crispr Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // TO-DO, pipeline parameters
    DATASET_HASHING = 'true'

    user_inference = "example_data/pairs_to_test.csv"
    guide_metadata = "example_data/guide_metadata.tsv"
    hashing_metadata = "example_data/hash_metadata.tsv"

    transcriptome = 'human'
    genome_download_path = 'https://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/hg38.fa.gz'
    genome_local_path = 'example_data/genome.fa.gz'

    gtf_download_path = 'https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_46/gencode.v46.annotation.gtf.gz'
    gtf_local_path = 'example_data/gencode_gtf.gtf.gz'

    seqspecs_directory = 'example_data/yaml_files'
    scRNA_seqspec_yaml = 'rna_seqspec.yml'
    Guides_seqspec_yaml = 'guide_seqspec.yml'
    Hash_seqspec_yaml = 'hash_seqspec.yml'

    min_genes = 500
    min_cells = 3
    pct_mito = 20

    assignment_method = 'sceptre'
    capture_method = 'CROP-seq'
    THRESHOLD = 1

    inference_method = 'sceptre,perturbo'

    inference_option = 'predefined_pairs'
    distance_from_center = 1000000

    moi = 'undecided'
    side = 'both'
    grna_integration_strategy = 'union'
    resampling_approximation = 'skew_normal'
    control_group = 'default'
    resampling_mechanism = 'default'
    formula_object = 'default'

    // Container
    containers {
        base     = 'sjiang9/conda-docker:0.1'
        cleanser = 'sjiang9/cleanser:0.3'
        sceptre  = 'sjiang9/sceptre-igvf:0.1'
        perturbo = 'pinellolab/perturbo-cuda:0.1'
    }

    // Google Cloud specific parameters
    google_project = 'igvf-pertub-seq-pipeline'
    google_region = 'us-central1'

    // Boilerplate options
    outdir                       = null
    publish_dir_mode             = 'copy'
    email                        = null
    email_on_fail                = null
    plaintext_email              = false
    monochrome_logs              = false
    hook_url                     = null

    version                      = false
    pipelines_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/'

    // Config options
    config_profile_name        = null
    config_profile_description = null

    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact     = null
    config_profile_url         = null


}

// Process Configuration
process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'downloadGTF|downloadGenome|skipGenomeDownload|skipGTFDownload|anndata_concat|createGuideRef|createHashingRef|seqSpecCheck|createDashboard_HASHING|createDashboard|CreateMuData_HASHING|CreateMuData|demultiplex|doublets_scrub|downloadReference|filter_hashing|hashing_concat|prepare_assignment|mudata_concat|inference_mudata|prepare_guide_inference|prepare_user_guide_inference|prepare_all_guide_inference|PreprocessAnnData|seqSpecParser|prepare_covariate|mergedResults|evaluation_plot|evaluation_undefined_plot' {
        container = params.containers.base
        machineType = {
            workflow.profile == 'google' ? 'n2-highmem-4' : null
        }
    }

    // Higher resource processes
    withName: 'mappingGuide|mappingHashing|mappingscRNA' {
        container = params.containers.base
        machineType = {
            workflow.profile == 'google' ? 'n2-highmem-8' : null
        }
    }

    withName: 'guide_assignment_cleanser' {
        container = params.containers.cleanser
        machineType = {
            workflow.profile == 'google' ? 'n2-highmem-8' : null
        }
    }

    withName: 'guide_assignment_sceptre|inference_sceptre' {
        container = params.containers.sceptre
        machineType = {
            workflow.profile == 'google' ? 'n2-highmem-16' : null
        }
    }

    withName: 'inference_perturbo' {
        container = params.containers.perturbo

        // Google Cloud machine type for GPU processes
        machineType = {
            workflow.profile == 'google' ? 'a2-highgpu-1g' : null
        }

        accelerator = {
            workflow.profile == 'google' ? [type: 'nvidia-tesla-a2', count: 1] : null
        }
    }

}

// Load base.config by default for all pipelines
// includeConfig 'conf/base.config'

profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        conda.createTimeout     = '1h'
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        conda.createTimeout     = '1h'
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        singularity.runOptions  = '--nv'
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
    }
    gitpod {
        executor.name           = 'local'
        executor.cpus           = 4
        executor.memory         = 8.GB
    }
    google {

        process {
            executor = 'google-batch'
            errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }
            maxRetries = 5
        }

        google {
            project = params.google_project
            location = params.google_region
            batch.spot = true
            batch.bootDiskSize = 100.GB
        }

        singularity.cacheDir = "${params.google_bucket}/singularity-cache"
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Load nf-core custom profiles from different Institutions
includeConfig !System.getenv('NXF_OFFLINE') && params.custom_config_base ? "${params.custom_config_base}/nfcore_custom.config" : "/dev/null"

// Load nf-core/crispr custom profiles from different institutions.
// TODO nf-core: Optionally, you can add a pipeline-specific nf-core config at https://github.com/nf-core/configs
// includeConfig !System.getenv('NXF_OFFLINE') && params.custom_config_base ? "${params.custom_config_base}/pipeline/crispr.config" : "/dev/null"

// Set default registry for Apptainer, Docker, Podman, Charliecloud and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Charliecloud / Singularity are enabled
// Set to your registry if you have a mirror of containers
// apptainer.registry    = 'quay.io'
// docker.registry       = 'quay.io'
// podman.registry       = 'quay.io'
// singularity.registry  = 'quay.io'
// charliecloud.registry = 'quay.io'


// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Set bash options
process.shell = """\
bash

set -e # Exit if a tool returns a non-zero status/exit code
set -u # Treat unset variables and parameters as an error
set -o pipefail # Returns the status of the last command to exit with a non-zero status or zero if all successfully execute
set -C # No clobber - prevent output redirection from overwriting files.
"""

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

params {
    trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
}

tower {
    enabled = true
    accessToken = "${TOWER_ACCESS_TOKEN ?: ''}"
}

timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${params.trace_timestamp}.html"
}

report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${params.trace_timestamp}.html"
}

trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${params.trace_timestamp}.txt"
}

dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${params.trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/crispr'
    author          = """EJ"""
    homePage        = 'https://github.com/nf-core/crispr'
    description     = """crispr pipeline"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=24.04.2'
    version         = '1.0.0dev'
    doi             = ''
}



// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'
